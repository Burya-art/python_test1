# Напиши класс, что ничего не принимает при инициализации, но создает атррибут класса _data(хай будет список). У класса должны быть следующие методы:
#     - add, который принимает value и добавляет его в конец _data, а конце метода принтит _data.
#         - если value уже есть в _data - рейзит ошибку что такое уже добавлено.
#     - remove, который принимает индекс элемента и удаляет его из списка по индексу, а конце метода принтит _data.
#         - если список _data пустой - рейзит ошибку что нельзя ничего удалить из пустого _data.
#     - do_print, который ничего не принимает, а просто в цикле принтит "индекс_элемента_в_списке: сам_элемент'
#         - если список _data пустой - рейзит ошибку что нельзя ничего принануть, бо список пустой.
# Инициализируй класс, а потом поиграйся с ним, повызывай методы, посмотри что будет и как работают.


class EmailSender:
    def __init__(self):
        self.data = []

    def add(self, value):
        if value in self.data:
            raise ValueError('Такое значение уже добавлено')
        self.data.append(value)
        print(self.data)

    def remove(self, index):
        if not self.data:
            raise ValueError("Нельзя ничего удалить из пустого data")
        del self.data[index]
        print(self.data)

    def do_print(self):
        if not self.data:
            raise ValueError('Список пустой')
        for index, elem in enumerate(self.data):
            print(index, elem)


email_send = EmailSender()

email_send.do_print()

#     - do_print, который ничего не принимает, а просто в цикле принтит "индекс_элемента_в_списке: сам_элемент'
#         - если список _data пустой - рейзит ошибку что нельзя ничего принануть, бо список пустой.